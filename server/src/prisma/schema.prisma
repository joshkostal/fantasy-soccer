datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Player {
    id         Int    @id @default(autoincrement())
    name       String @db.VarChar(64)
    teamId     Int?
    positionId Int

    team               Team?               @relation(fields: [teamId], references: [id])
    position           Position            @relation(fields: [positionId], references: [id])
    playerMatches      PlayerMatch[]
    fantasyTeamPlayers FantasyTeamPlayer[]
}

model Position {
    id        Int    @id @default(autoincrement())
    name      String @unique @db.VarChar(32)
    shortName String @unique @db.VarChar(2)

    players Player[]
}

model PlayerMatch {
    id       Int  @id @default(autoincrement())
    points   Int? // Break this down to individual stats
    matchId  Int
    playerId Int

    match                Match                @relation(fields: [matchId], references: [id])
    player               Player               @relation(fields: [playerId], references: [id])
    fantasyPlayerMatches FantasyPlayerMatch[]
    @@unique([playerId, matchId])
}

model Match {
    id         Int      @id @default(autoincrement())
    matchWeek  Int
    homeScore  Int?
    awayScore  Int?
    homeTeamId Int
    awayTeamId Int
    dateTime   DateTime

    homeTeam      Team          @relation("home", fields: [homeTeamId], references: [id])
    awayTeam      Team          @relation("away", fields: [awayTeamId], references: [id])
    playerMatches PlayerMatch[]
    @@unique([matchWeek, homeTeamId, awayTeamId])
}

model Team {
    id        Int    @id @default(autoincrement())
    name      String @unique @db.VarChar(64)
    shortName String @unique @db.VarChar(8)

    players     Player[]
    homeMatches Match[]  @relation("home")
    awayMatches Match[]  @relation("away")
}

model FantasyTeamPlayer {
    id            Int @id @default(autoincrement())
    playerId      Int
    fantasyTeamId Int

    player      Player      @relation(fields: [playerId], references: [id])
    fantasyTeam FantasyTeam @relation(fields: [fantasyTeamId], references: [id])
    fantasyPlayerMatches FantasyPlayerMatch[]
    @@unique([playerId, fantasyTeamId])
}

model FantasyPlayerMatch {
    playerMatchId       Int
    fantasyTeamPlayerId Int
    isStarter           Boolean @default(false)

    playerMatch PlayerMatch @relation(fields: [playerMatchId], references: [id])
    fantasyTeamPlayer FantasyTeamPlayer @relation(fields: [fantasyTeamPlayerId], references: [id])
    @@unique([playerMatchId, fantasyTeamPlayerId])
}

model FantasyTeam {
    id              Int    @id @default(autoincrement())
    name            String @db.VarChar(64)
    fantasyLeagueId Int
    ownerId         Int

    fantasyLeague      FantasyLeague        @relation(fields: [fantasyLeagueId], references: [id])
    owner              User                 @relation(fields: [ownerId], references: [id])
    players            FantasyTeamPlayer[]
    @@unique([fantasyLeagueId, ownerId])
}

model FantasyLeague {
    id             Int    @id @default(autoincrement())
    name           String @db.VarChar(64)
    commissionerId Int

    fantasyTeams FantasyTeam[]
    commissioner User          @relation(fields: [commissionerId], references: [id])
}

model User {
    id    Int    @id @default(autoincrement())
    name  String @db.VarChar(64)
    email String @unique @db.VarChar(64)

    fantasyTeams        FantasyTeam[]
    commissionerLeagues FantasyLeague[]
}
