datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Player {
    id         Int    @id @default(autoincrement())
    name       String @db.VarChar(64)
    teamId     Int?
    positionId Int

    team         Team?               @relation(fields: [teamId], references: [id])
    position     Position            @relation(fields: [positionId], references: [id])
    matches      PlayerMatch[]
    fantasyTeams FantasyTeamPlayer[]
}

model Position {
    id        Int    @id @default(autoincrement())
    name      String @unique @db.VarChar(32)
    shortName String @unique @db.VarChar(2)

    players Player[]
    fantasyPlayerMatch FantasyPlayerMatch[]
}

model PlayerMatch {
    id          Int  @id @default(autoincrement())
    totalPoints Int? // TODO: Should we keep this? It will make processing quicker
    matchId     Int
    playerId    Int

    goals             Int?
    assists           Int?
    pksWon            Int?
    isMOTM            Boolean?
    hasHatTrick       Boolean?
    hasYellowCard     Boolean?
    hasRedCard        Boolean?
    pksConceded       Int?
    pksMissed         Int?
    offsides          Int?
    saves             Int?
    tackles           Int?
    pksSaved          Int?
    shotsBlocked      Int?
    interceptions     Int?
    isCleanSheet      Boolean?
    goalsConceded     Int?
    dribblesCompleted Int?
    shotsOnTarget     Int?
    keyPasses         Int?
    isShutout         Boolean?
    timesDribbledPast Int?

    match                Match                @relation(fields: [matchId], references: [id])
    player               Player               @relation(fields: [playerId], references: [id])
    fantasyPlayerMatches FantasyPlayerMatch[]

    @@unique([playerId, matchId])
}

model Match {
    id         Int      @id @default(autoincrement())
    matchWeek  Int
    homeScore  Int?
    awayScore  Int?
    homeTeamId Int
    awayTeamId Int
    dateTime   DateTime

    homeTeam      Team          @relation("home", fields: [homeTeamId], references: [id])
    awayTeam      Team          @relation("away", fields: [awayTeamId], references: [id])
    players PlayerMatch[]

    @@unique([matchWeek, homeTeamId, awayTeamId])
}

model Team {
    id        Int    @id @default(autoincrement())
    name      String @unique @db.VarChar(64)
    shortName String @unique @db.VarChar(8)

    players     Player[]
    homeMatches Match[]  @relation("home")
    awayMatches Match[]  @relation("away")
}

model FantasyTeamPlayer {
    id            Int @id @default(autoincrement())
    playerId      Int
    fantasyTeamId Int

    player               Player               @relation(fields: [playerId], references: [id])
    fantasyTeam          FantasyTeam          @relation(fields: [fantasyTeamId], references: [id])
    fantasyPlayerMatches FantasyPlayerMatch[]

    @@unique([playerId, fantasyTeamId])
}

model FantasyPlayerMatch {
    playerMatchId       Int
    fantasyTeamPlayerId Int
    isStarter           Boolean @default(false)
    positionId          Int? // TODO: Add check constraint to ensure a position is only selected if isStarter == true (https://www.prisma.io/docs/guides/database/developing-with-prisma-migrate/include-unsupported-database-features)

    position          Position?          @relation(fields: [positionId], references: [id])
    playerMatch       PlayerMatch       @relation(fields: [playerMatchId], references: [id])
    fantasyTeamPlayer FantasyTeamPlayer @relation(fields: [fantasyTeamPlayerId], references: [id])

    @@unique([playerMatchId, fantasyTeamPlayerId])
}

model FantasyMatch {
    id         Int  @id @default(autoincrement())
    team1Id    Int
    team2Id    Int
    team1Score Int?
    team2Score Int?

    team1 FantasyTeam @relation("team1", fields: [team1Id], references: [id])
    team2 FantasyTeam @relation("team2", fields: [team2Id], references: [id])
}

model FantasyTeam {
    id              Int    @id @default(autoincrement())
    name            String @db.VarChar(64)
    fantasyLeagueId Int
    ownerId         Int

    fantasyLeague FantasyLeague       @relation(fields: [fantasyLeagueId], references: [id])
    owner         User                @relation(fields: [ownerId], references: [id])
    players       FantasyTeamPlayer[]
    team1Matches  FantasyMatch[]      @relation("team1")
    team2Matches  FantasyMatch[]      @relation("team2")

    @@unique([fantasyLeagueId, ownerId])
}

model FantasyLeague {
    id             Int    @id @default(autoincrement())
    name           String @db.VarChar(64)
    commissionerId Int

    fantasyTeams FantasyTeam[]
    commissioner User          @relation(fields: [commissionerId], references: [id])
}

model User {
    id    Int    @id @default(autoincrement())
    name  String @db.VarChar(64)
    email String @unique @db.VarChar(64)

    fantasyTeams        FantasyTeam[]
    commissionerLeagues FantasyLeague[]
}
